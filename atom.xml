<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>第三世界</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://disanshijie.top/"/>
  <updated>2019-11-09T15:37:11.746Z</updated>
  <id>http://disanshijie.top/</id>
  
  <author>
    <name>sun bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>list去重</title>
    <link href="http://disanshijie.top/post/21bd8e5b.html"/>
    <id>http://disanshijie.top/post/21bd8e5b.html</id>
    <published>2019-11-09T15:36:43.000Z</published>
    <updated>2019-11-09T15:37:11.746Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TODO 方案二待验证<br><a id="more"></a></p><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hashset是如何保持元素的唯一性呢？</span><br><span class="line"> * 是通过元素的hashcode和equals来表示：</span><br><span class="line"> * 如果hashCode值一样，则比较equals是否为true</span><br><span class="line"> * 如果hashCode值不一样，不用比较equals</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * List是如何集合中元素相同的呢？</span><br><span class="line"> * 是通过元素的hashcode和equals来表示：</span><br><span class="line"> * 如果hashCode值一样，则比较equals是否为true</span><br><span class="line"> * 如果hashCode值不一样，不用比较equals</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package entity;</span><br><span class="line">import java.util.Objects;</span><br><span class="line">import lombok.Data;</span><br><span class="line"> </span><br><span class="line">@Data</span><br><span class="line">public class Person &#123;</span><br><span class="line">  private Integer id;</span><br><span class="line">  private String name;</span><br><span class="line"> </span><br><span class="line">  public Person(Integer id, String name) &#123;</span><br><span class="line">    this.id = id;</span><br><span class="line">    this.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @Override</span><br><span class="line">  public boolean equals(Object o) &#123;</span><br><span class="line">    if (this == o) return true;</span><br><span class="line">    if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line">    Person person = (Person) o;</span><br><span class="line">    return Objects.equals(id, person.id) &amp;&amp;</span><br><span class="line">      Objects.equals(name, person.name);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @Override</span><br><span class="line">  public int hashCode() &#123;</span><br><span class="line">    return Objects.hash(id, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eg2: 或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class ProjectVo extends Project &#123;</span><br><span class="line">    private String userOrderId;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this == o) return true;</span><br><span class="line">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line">        ProjectVo per = (ProjectVo) o;</span><br><span class="line">        return this.getId().equals(per.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        return this.getId().hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><p>情景一：List合并去重 （A和B都是同一个对象的list集合）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.removeAll(B); //由于对象的hashCode和equal重写了，根据重写条件来 判断删除</span><br><span class="line">A.addAll(B);</span><br></pre></td></tr></table></figure><p>情景二：</p><p>利用java8的新特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Person&gt; list = Arrays.asList(person1,person2,person3,person4);</span><br><span class="line">List&lt;Person&gt; distinctElements = list.stream()</span><br><span class="line">                                            .distinct()</span><br><span class="line">                                            .collect( Collectors.toList() );</span><br></pre></td></tr></table></figure><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>重写equals和hashCode方法不是很灵活，利用java8采用新方案</p><p>形式一</p><p>1、定义一个Predicate返回值方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Predicate&lt;T&gt; distinctByKey(Function&lt;? super T, Object&gt; keyExtractor)</span><br><span class="line">&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; map = new ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    return t -&gt; map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、结合Stream的filter方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)</span><br><span class="line">   &#123;</span><br><span class="line">       Person lokesh = new Person(1, &quot;Lokesh&quot;, &quot;Gupta&quot;);</span><br><span class="line">       Person brian = new Person(2, &quot;Brian&quot;, &quot;Clooney&quot;);</span><br><span class="line">       Person alex = new Person(3, &quot;Alex&quot;, &quot;Kolen&quot;);</span><br><span class="line">        </span><br><span class="line">       //Add some random persons</span><br><span class="line">       Collection&lt;Person&gt; list = Arrays.asList(lokesh,brian,alex,lokesh,brian,lokesh);</span><br><span class="line"></span><br><span class="line">       // Get distinct objects by key</span><br><span class="line">       List&lt;Person&gt; distinctElements = list.stream()</span><br><span class="line">                                           .filter( distinctByKey(p -&gt; p.getId()) )</span><br><span class="line">                                           .collect( Collectors.toList() );</span><br><span class="line"></span><br><span class="line">       // Let&apos;s verify distinct elements</span><br><span class="line">       System.out.println( distinctElements );</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ps： person对象不需要任何修改</p><p>形式二</p><p>根据id去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根据name去重</span><br><span class="line">List&lt;Person&gt; unique = persons.stream().collect(</span><br><span class="line">            Collectors.collectingAndThen(</span><br><span class="line">                    Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparing(Person::getId))), ArrayList::new)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>根据id和name去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 根据name,sex两个属性去重</span><br><span class="line">List&lt;Person&gt; unique = persons.stream().collect(</span><br><span class="line">           Collectors. collectingAndThen(</span><br><span class="line">                    Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparing(o -&gt; o.getId() + &quot;;&quot; + o.getName()))), ArrayList::new)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TODO 方案二待验证&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/"/>
    
      <category term="算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>二分法查找</title>
    <link href="http://disanshijie.top/post/49f727d5.html"/>
    <id>http://disanshijie.top/post/49f727d5.html</id>
    <published>2019-11-09T15:11:47.000Z</published>
    <updated>2019-11-09T15:36:24.821Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>使用二分法查找的数组必须是已经进行排序好的数组，首先定义一个初始下标，一个结尾下标，然后用需要查找的数同数组中的中间元素进行对比，如果相等，则返回中间数组元素下标，如果大于此元素，则让初始下标等于中间下标加一，再次进行对比，直到返回一个中间下标或者未找到，反之亦然。（中间下标 = （初始下标 + 结尾下标） / 2）</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  二分法查找</span><br><span class="line"> * @param a 需要进行检索的数组</span><br><span class="line"> * @param idx 需要检索的值</span><br><span class="line"> * @return 检索结果（该值下标或-1：未找到）</span><br><span class="line"> */</span><br><span class="line">public static int index(int[] a,int idx) &#123;</span><br><span class="line">    int min = 0;//低位</span><br><span class="line">    int max = a.length-1;//高位</span><br><span class="line"></span><br><span class="line">    //只要高位边不比低位小，就继续二分</span><br><span class="line">    while(min &lt;= max) &#123;</span><br><span class="line">        int middle = (min + max)/2; //可以随便给中位赋值下标</span><br><span class="line"></span><br><span class="line">        //结束条件判断</span><br><span class="line">        if(a[middle] == idx) &#123; //当中位和find值相等时，找到find值所对应的下标，二分结束</span><br><span class="line">            return middle;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //二分判断 val在中位的左边还是右边</span><br><span class="line">        if(idx &gt; a[middle]) &#123; //二分后中位比find值小，说明find值在中位的右边，那么低位就是此时的中位，然后继续二分</span><br><span class="line">            min = middle+1;</span><br><span class="line">        &#125;else &#123; //二分之后中位比find值大，说明find值在中位的左边，那么高位就是此时的中位，然后继续二分</span><br><span class="line">            max = middle - 1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">  int [] arr=&#123;5,13,19,21,37,56,64,75,80,88,92&#125;;    //数组必须是有序的</span><br><span class="line">        System.out.println(index(arr,21));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">//输出：3</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/li1376417539/article/details/82728713" target="_blank" rel="noopener">https://blog.csdn.net/li1376417539/article/details/82728713</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用二分法查找的数组必须是已经进行排序好的数组，首先定义一个初始下标，一个结尾下标，然后用需要查找的数同数组中的中间元素进行对比，如果相等，则返回中间数组元素下标，如果大于此元素，则让初始下标等于中间下标加一，再次进行对比，直到返回一个中间下标或者未找到，反之亦然。（中间下标 = （初始下标 + 结尾下标） / 2）&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/"/>
    
      <category term="算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>返回稳定值</title>
    <link href="http://disanshijie.top/post/7018acf6.html"/>
    <id>http://disanshijie.top/post/7018acf6.html</id>
    <published>2019-11-08T01:47:11.000Z</published>
    <updated>2019-11-09T15:33:33.724Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>公司项目有一个需求，通过称重货架来计算 物资的数量，在实际使用的过程中 人员每次从 称重货架上拿区的物品过程是 不稳定且确定性的<br>如果使用定时的方式获取称重货架的值 可能取到的值是某个时间点的瞬时重量 不是实际的重量</p><p>现通过算法实现 获取到的是称重货架 在稳定一个固定时间段 后返回的值</p><a id="more"></a><p> <img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191109175507.png" alt><br>记录一个时间点的稳定值，<br>下一次 变量波动后，<br>记录第n次 后最终稳定下来的值 m5</p><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>创建 StabeDataHandle 类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class StabeDataHandle &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 指定时间范围 t</span><br><span class="line">     * 这个值需要大于秤盘发送数据的时间间隔</span><br><span class="line">     */</span><br><span class="line">    public final static Long dealyTime = 6L;</span><br><span class="line">    /**</span><br><span class="line">     * 误差范围</span><br><span class="line">     */</span><br><span class="line">    public final static Double scope = 10.00;</span><br><span class="line"></span><br><span class="line">    public static Map&lt;String, List&lt;StabeDataModel&gt;&gt; lists = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private static StabeDataHandle stabeDataUtil = new StabeDataHandle();</span><br><span class="line"></span><br><span class="line">    private StabeDataHandle() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static StabeDataHandle getInstance() &#123;</span><br><span class="line">        return stabeDataUtil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public Double[] getData(String id, Double val) &#123;</span><br><span class="line">        Double[] res = new Double[2]; //返回数组 上一次稳定值和当前稳定值</span><br><span class="line">        Long time = System.currentTimeMillis() / 1000;</span><br><span class="line"></span><br><span class="line">        List&lt;StabeDataModel&gt; data = lists.get(id);</span><br><span class="line"></span><br><span class="line">        if (data == null) &#123;</span><br><span class="line">            //初始化</span><br><span class="line">            data = new ArrayList&lt;StabeDataModel&gt;();</span><br><span class="line">            data.add(new StabeDataModel(time, val,0L));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            StabeDataModel original = data.get(0);</span><br><span class="line">            Long dt = time - dealyTime;</span><br><span class="line"></span><br><span class="line">            //先把当前传过来的值 放到数组中，和以前的数据一起做处理</span><br><span class="line">            data.add(new StabeDataModel(time, val,time-original.getTime()));</span><br><span class="line"></span><br><span class="line">            //当前时间-指定时间 &gt; 最开始时间  说明有足够时间范围,可以计算了</span><br><span class="line">            if (dt &gt;= original.getTime()) &#123;</span><br><span class="line"></span><br><span class="line">                //获取指定时间范围内的值 即A4点的数据</span><br><span class="line">                int index = BinarySearch(data, dt);</span><br><span class="line">                if(index == -1)&#123;</span><br><span class="line">                    //没找到 继续添加值 (这个情况 可能是秤盘 坏了,没有在固定时间内返回值给我)</span><br><span class="line">                    System.out.println(&quot;没找到 继续添加；可能是秤盘 坏了,没有在固定时间内发送值给我&quot;);</span><br><span class="line">                    //data.add(new StabeDataModel(time, val,time-original.getTime()));</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //data.add(new StabeDataModel(time, val,time-original.getTime()));</span><br><span class="line">                    //判断这个时间范围内的值 是否全部相等 (差值在一定误差范围内默认是相等的 )</span><br><span class="line">                    boolean flag = stableVerify(data, index, scope);</span><br><span class="line">                    if (flag) &#123;</span><br><span class="line">                        //如果相等，证明找到了 第二个稳定值</span><br><span class="line">                        //重置 data</span><br><span class="line">                        data = new ArrayList&lt;StabeDataModel&gt;();</span><br><span class="line">                        data.add(new StabeDataModel(time, val,0L));</span><br><span class="line"></span><br><span class="line">                        res[0] = original.getVal();</span><br><span class="line">                        res[1] = val;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lists.put(id, data);</span><br><span class="line">        testData(id);</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 计算 某段时间范围内的数据 是否都在误差范围内</span><br><span class="line">     * @param datas</span><br><span class="line">     * @param index 开始位置</span><br><span class="line">     * @param scope 误差范围</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static boolean stableVerify(List&lt;StabeDataModel&gt; datas, int index, Double scope) &#123;</span><br><span class="line"></span><br><span class="line">        Double max = datas.get(index).getVal();</span><br><span class="line">        Double min = datas.get(index).getVal();</span><br><span class="line"></span><br><span class="line">        //计算最值</span><br><span class="line">        for (int i = index; i &lt; datas.size(); i++) &#123;</span><br><span class="line">            if (datas.get(i).getVal() &gt; max) &#123;</span><br><span class="line">                max = datas.get(i).getVal();</span><br><span class="line">            &#125;</span><br><span class="line">            if (datas.get(i).getVal() &lt; min) &#123;</span><br><span class="line">                min = datas.get(i).getVal();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (max - min &lt;= scope) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 二分法查找 获取在某个时间点上的 下标&lt;br/&gt;</span><br><span class="line">     * ps: 如果 datas.size()==2 说明秤盘在稳定时间范围外发给我的一条数据 将被认为是有效数据 系统将进入第二次循环</span><br><span class="line">     * @param datas,</span><br><span class="line">     * @param val</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static int BinarySearch(List&lt;StabeDataModel&gt; datas, Long val) &#123;</span><br><span class="line"></span><br><span class="line">        int min = 0;</span><br><span class="line">        int max = datas.size() - 1;</span><br><span class="line">        while (min &lt;= max) &#123;</span><br><span class="line">            int middle = (min + max) / 2;</span><br><span class="line"></span><br><span class="line">            //条件判断</span><br><span class="line">            if (val &gt;= datas.get(middle).getTime()) &#123;</span><br><span class="line">                //int next = (middle + 1 &gt; max)?max:middle + 1;</span><br><span class="line">                if (val &lt;= datas.get(middle + 1).getTime()) &#123;</span><br><span class="line">                    return middle;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //二分判断 val在中位的左边还是右边</span><br><span class="line">            if (val &gt; datas.get(middle).getTime()) &#123;</span><br><span class="line">                min = middle + 1;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                max = middle - 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void testData(String id) &#123;</span><br><span class="line">        System.out.println(&quot;------1-------&quot;);</span><br><span class="line">        List&lt;StabeDataModel&gt; data = lists.get(id);</span><br><span class="line">        for (StabeDataModel datum : data) &#123;</span><br><span class="line">            System.out.println(datum);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;------2-------&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类 StabeDataModel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package com.xue.util;</span><br><span class="line"></span><br><span class="line">public class StabeDataModel &#123;</span><br><span class="line"></span><br><span class="line">    private String id;</span><br><span class="line">    private Long key;</span><br><span class="line">    private Double val;</span><br><span class="line">    private Long time;</span><br><span class="line"></span><br><span class="line">    public StabeDataModel(Long time, Double val, Long key) &#123;</span><br><span class="line">        this.key = key;</span><br><span class="line">        this.val = val;</span><br><span class="line">        this.time = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;StabeDataModel&#123;&quot; +</span><br><span class="line">                &quot;id=&apos;&quot; + id + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, key=&quot; + key +</span><br><span class="line">                &quot;, val=&quot; + val +</span><br><span class="line">                &quot;, time=&quot; + time +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getKey() &#123;</span><br><span class="line">        return key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setKey(Long key) &#123;</span><br><span class="line">        this.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Double getVal() &#123;</span><br><span class="line">        return val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setVal(Double val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Long getTime() &#123;</span><br><span class="line">        return time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTime(Long time) &#123;</span><br><span class="line">        this.time = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//测试</span><br><span class="line">@RequestMapping(&quot;/dataTest&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public Object dataTest(@RequestParam HashMap params)&#123;</span><br><span class="line">HashMap&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">String id = (String) params.get(&quot;id&quot;);</span><br><span class="line">Double val = Double.valueOf(params.get(&quot;val&quot;).toString());</span><br><span class="line">Double[] res = StabeDataHandle.getInstance().getData(id, val);</span><br><span class="line"></span><br><span class="line">map.put(&quot;data&quot;,StabeDataHandle.lists);</span><br><span class="line">map.put(&quot;result&quot;,res);</span><br><span class="line">return map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;result&quot;: [</span><br><span class="line">        null,</span><br><span class="line">        null</span><br><span class="line">    ],</span><br><span class="line">    &quot;data&quot;: &#123;</span><br><span class="line">        &quot;123&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 0,</span><br><span class="line">                &quot;val&quot;: 562,</span><br><span class="line">                &quot;time&quot;: 1573312026</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 6,</span><br><span class="line">                &quot;val&quot;: 2,</span><br><span class="line">                &quot;time&quot;: 1573312032</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 10,</span><br><span class="line">                &quot;val&quot;: 2,</span><br><span class="line">                &quot;time&quot;: 1573312036</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 13,</span><br><span class="line">                &quot;val&quot;: 255,</span><br><span class="line">                &quot;time&quot;: 1573312039</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 20,</span><br><span class="line">                &quot;val&quot;: 2524,</span><br><span class="line">                &quot;time&quot;: 1573312046</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 24,</span><br><span class="line">                &quot;val&quot;: 25247,</span><br><span class="line">                &quot;time&quot;: 1573312050</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;id&quot;: null,</span><br><span class="line">                &quot;key&quot;: 27,</span><br><span class="line">                &quot;val&quot;: 25247,</span><br><span class="line">                &quot;time&quot;: 1573312053</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一次 重置数据，并返回变化值</p><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191109230812.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司项目有一个需求，通过称重货架来计算 物资的数量，在实际使用的过程中 人员每次从 称重货架上拿区的物品过程是 不稳定且确定性的&lt;br&gt;如果使用定时的方式获取称重货架的值 可能取到的值是某个时间点的瞬时重量 不是实际的重量&lt;/p&gt;
&lt;p&gt;现通过算法实现 获取到的是称重货架 在稳定一个固定时间段 后返回的值&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/"/>
    
      <category term="算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>tomcat控制台输出方法出现堵塞</title>
    <link href="http://disanshijie.top/post/489cb7c0.html"/>
    <id>http://disanshijie.top/post/489cb7c0.html</id>
    <published>2019-11-05T08:37:40.000Z</published>
    <updated>2019-11-05T08:41:17.615Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>tomcat脚本启动 调用带控制台输出方法出现堵塞</p><p>tomcat控制台输出信息时会卡住的原因</p><p>tomcat 启动窗口卡住 网页无法打开</p><a id="more"></a><p>在帮同事解决问题的时候碰到一个问题：（windows系统下）在tomcat部署webservice，脚本启动tomcat，调用接口（接口中有控制台打印代码）会出现堵塞现象，然而在tomcat控制台中按crtl+c(空格、回车或者其他按键也可以)后，堵塞就会消失，接口顺利执行完毕。网上搜索了一下应该是powershell中“快速编辑模式”开启的问题。将“快速编辑模式”关闭就会解决此前的问题。</p><p>经过自己反复测试，发现出现堵塞需要如下条件：</p><pre><code>（1）.调用接口执行路径中有System.out.println （2）.快速编辑模式下的tomcat控制台选择了其他已输出内容</code></pre><p>猜测如下：在快速编辑模式下，可以随意选取控制台已输出的内容，导致控制台窗口失焦或光标不在尾端，从而导致System.out.println语句堵塞</p><p>关闭快速编辑模式方法：右击窗口-选择属性-选择选项-取消勾选快速编辑模式</p><p>另附PowerShell的两种模式：</p><p>powershell控制台有两种模式，一个是快速编辑模式，一个是标准模式。<br>快速编辑模式和标准模式的切换可以通过控制台标题栏-&gt;鼠标右击-&gt;属性-&gt;选项-&gt;编辑选项 。</p><p>Powershell标准模式<br>鼠标右击选择标记后才能实现复制和粘切功能。<br>Powershell快速编辑模式<br>可以通过鼠标左键选择任意矩形区域内的文本，并且鼠标右击实现复制功能。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/yandiyu/article/details/82460328" target="_blank" rel="noopener">https://blog.csdn.net/yandiyu/article/details/82460328</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tomcat脚本启动 调用带控制台输出方法出现堵塞&lt;/p&gt;
&lt;p&gt;tomcat控制台输出信息时会卡住的原因&lt;/p&gt;
&lt;p&gt;tomcat 启动窗口卡住 网页无法打开&lt;/p&gt;
    
    </summary>
    
      <category term="技术\WEB\工具\tomcat" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-WEB-%E5%B7%A5%E5%85%B7-tomcat/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>mysql基本信息</title>
    <link href="http://disanshijie.top/post/cfafb02a.html"/>
    <id>http://disanshijie.top/post/cfafb02a.html</id>
    <published>2019-11-04T12:58:20.000Z</published>
    <updated>2019-11-04T13:03:59.023Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>MySQL版本</p><p>获取字段名，注释，数据类型</p><a id="more"></a><h2 id="查看MySQL版本"><a href="#查看MySQL版本" class="headerlink" title="查看MySQL版本"></a>查看MySQL版本</h2><ol><li><strong>登录MySQL方法</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status;</span><br><span class="line">mysql&gt; select version();</span><br><span class="line">mysql&gt; select @@version;</span><br><span class="line">mysql&gt; show variables like &quot;%version%&quot;;</span><br></pre></td></tr></table></figure><p><strong>不登录直接查询方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p             #连接mysql</span><br><span class="line">$ mysqladmin -uroot -p version;</span><br><span class="line"> </span><br><span class="line">$ mysql -V</span><br><span class="line">$ mysql --version</span><br><span class="line"> </span><br><span class="line">$ mysql --help | grep Distrib</span><br><span class="line">$ mysql -? | grep Distrib</span><br><span class="line">$ mysql -I | grep Distrib</span><br><span class="line"> </span><br><span class="line">$ rpm -qa|grep mysql</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.cnblogs.com/mehome/p/9428175.html" target="_blank" rel="noopener">https://www.cnblogs.com/mehome/p/9428175.html</a></p><h2 id="获取字段名，注释，数据类型"><a href="#获取字段名，注释，数据类型" class="headerlink" title="获取字段名，注释，数据类型"></a>获取字段名，注释，数据类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name,column_comment,data_type,column_type from information_schema.columns where table_name=表名;</span><br></pre></td></tr></table></figure><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column_name,column_comment,data_type,column_type from information_schema.columns where table_schema =&apos;wztppt-fuyang&apos; and table_name = &apos;wms_measuring_unit&apos; ;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MySQL版本&lt;/p&gt;
&lt;p&gt;获取字段名，注释，数据类型&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务器" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="数据库" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E6%95%B0%E6%8D%AE%E5%BA%93/MySQL/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>tomcat调优</title>
    <link href="http://disanshijie.top/post/d7577236.html"/>
    <id>http://disanshijie.top/post/d7577236.html</id>
    <published>2019-11-03T14:53:22.000Z</published>
    <updated>2019-11-04T13:03:58.994Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>一般都是下载加压版，直接用就行，可能出现的问题：<br>tomcat启动很慢（Linux上常见）<br>tomcat启动内存溢出</p><a id="more"></a><h3 id="tomcat启动很慢"><a href="#tomcat启动很慢" class="headerlink" title="tomcat启动很慢"></a>tomcat启动很慢</h3><p>待写</p><h3 id="tomcat启动内存溢出"><a href="#tomcat启动内存溢出" class="headerlink" title="tomcat启动内存溢出"></a>tomcat启动内存溢出</h3><p><strong>结论</strong>：在catalina.bat第二行添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_OPTS=%JAVA_OPTS% -server -Xms512m -Xmx512m -XX:MaxNewSize=256m -XX:PermSize=512M -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191103232001.png" alt></p><p><strong>设置tomcat内存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xms128M -Xmx256M</span><br></pre></td></tr></table></figure><p>-Xms<br>JVM初始化堆的大小<br>-Xmx<br>JVM堆的最大值</p><p>类似这样的设置，是设置tomcat可用的最大内存为256m，默认初始化是128m，这样设置会造成jvm进行gc，所以一般为了减少gc，会将这两个值设置为同样大小</p><p><strong>设置jvm 永久代内存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set JAVA_OPTS=%JAVA_OPTS% -server -XX:PermSize=512M -XX:MaxPermSize=512m</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191103230415.jpg" alt></p><blockquote><p><strong>ps：以上都在 catalina.bat/catalina.sh 文件中设置</strong></p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/zhangchengzi/p/9759890.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangchengzi/p/9759890.html</a></p><p><a href="https://blog.csdn.net/unesco3187/article/details/48290469" target="_blank" rel="noopener">https://blog.csdn.net/unesco3187/article/details/48290469</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般都是下载加压版，直接用就行，可能出现的问题：&lt;br&gt;tomcat启动很慢（Linux上常见）&lt;br&gt;tomcat启动内存溢出&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="WEB" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/"/>
    
      <category term="工具" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="tomcat" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/%E5%B7%A5%E5%85%B7/tomcat/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Hexo分类栏子父类多级分类</title>
    <link href="http://disanshijie.top/post/6d0d7dd.html"/>
    <id>http://disanshijie.top/post/6d0d7dd.html</id>
    <published>2019-11-03T03:28:44.000Z</published>
    <updated>2019-11-04T13:03:58.997Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>hexo 文章分类栏 实现多级 子父类排列，基于xups主题</p><a id="more"></a><h3 id="效果："><a href="#效果：" class="headerlink" title="效果："></a>效果：</h3><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191103112935.png" alt></p><p>实现：</p><p><a href="https://blog.csdn.net/SeayXu/article/details/51580568" target="_blank" rel="noopener">https://blog.csdn.net/SeayXu/article/details/51580568</a></p><p>js页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章分类 --&gt;</span><br><span class="line">&lt;% if (site.categories.length)&#123; %&gt;</span><br><span class="line">    &lt;div class=&quot;category-block&quot;&gt;</span><br><span class="line">      &lt;!--&lt;h3 class=&quot;asidetitle&quot;&gt;&lt;%= __(&apos;categories&apos;) %&gt;&lt;/h3&gt; --&gt;</span><br><span class="line">         &lt;%- list_categories(site.categories) %&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>样式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">//categories</span><br><span class="line">.category-block .category-list&gt;li</span><br><span class="line">  border-bottom 1px solid #eee</span><br><span class="line">  padding-bottom 10px</span><br><span class="line">.category-block li</span><br><span class="line">  //border-bottom 1px solid #ccc</span><br><span class="line">  display block</span><br><span class="line">  padding-top 10px</span><br><span class="line">  line-height 1.5</span><br><span class="line">  font-size 12px</span><br><span class="line">  overflow hidden</span><br><span class="line">  text-overflow ellipsis</span><br><span class="line">  white-space nowrap</span><br><span class="line">.category-block</span><br><span class="line">  .category-list</span><br><span class="line">    @media mini</span><br><span class="line">      width 45%</span><br><span class="line">      float left</span><br><span class="line">      margin 0 5% 0 0</span><br><span class="line">    @media tablet</span><br><span class="line">      width 100%</span><br><span class="line">      float none</span><br><span class="line">      margin .5em 0 0</span><br><span class="line">    .categoriy-list-item</span><br><span class="line">      padding .5em 5%</span><br><span class="line">    .category-list-count</span><br><span class="line">      top -.5em</span><br><span class="line">      padding-left .3em</span><br><span class="line">      font-size 75%</span><br><span class="line">      line-height 0</span><br><span class="line">      position relative</span><br><span class="line">      vertical-align baseline</span><br><span class="line">    ul, ol, dl</span><br><span class="line">      list-style none</span><br><span class="line">    ul, ol, dl</span><br><span class="line">      background-color #ffffff</span><br><span class="line">      margin-left 20px</span><br><span class="line">      li</span><br><span class="line">        //border-bottom 1px dashed #ccc</span><br><span class="line">    .category-list-child</span><br><span class="line">      border-top 1px dashed #ccc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191103113348.png" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/e6e54389c88f" target="_blank" rel="noopener">https://www.jianshu.com/p/e6e54389c88f</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo 文章分类栏 实现多级 子父类排列，基于xups主题&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="WEB" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/"/>
    
      <category term="建站" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/%E5%BB%BA%E7%AB%99/"/>
    
      <category term="hexo" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/WEB/%E5%BB%BA%E7%AB%99/hexo/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>maven中指定jdk</title>
    <link href="http://disanshijie.top/post/d0f64878.html"/>
    <id>http://disanshijie.top/post/d0f64878.html</id>
    <published>2019-10-24T11:04:44.000Z</published>
    <updated>2019-11-04T13:03:58.981Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>maven项目会用<code>maven-compiler-plugin</code>默认的JDK版本来进行编译，如果不指明版本就容易出现版本不匹配的问题，可能导致编译不通过的问题。</p><a id="more"></a><p>解决办法：在pom文件中配置maven-compiler-plugin插件。</p><p><strong>有两种方式：</strong><br> <strong>方式一：</strong><br> properties标签添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式二：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/u010019566/article/details/99725850" target="_blank" rel="noopener">https://blog.csdn.net/u010019566/article/details/99725850</a></p><p><a href="https://www.jianshu.com/p/a14ace43b9d3" target="_blank" rel="noopener">https://www.jianshu.com/p/a14ace43b9d3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;maven项目会用&lt;code&gt;maven-compiler-plugin&lt;/code&gt;默认的JDK版本来进行编译，如果不指明版本就容易出现版本不匹配的问题，可能导致编译不通过的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术\WEB\工具\maven" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-WEB-%E5%B7%A5%E5%85%B7-maven/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>maven引入本地jar</title>
    <link href="http://disanshijie.top/post/a7075883.html"/>
    <id>http://disanshijie.top/post/a7075883.html</id>
    <published>2019-10-23T11:01:10.000Z</published>
    <updated>2019-11-04T13:03:58.984Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TODO</p><p>maven引入本地jar</p><a id="more"></a><h3 id="方案一-直接路径引入"><a href="#方案一-直接路径引入" class="headerlink" title="方案一 直接路径引入"></a>方案一 直接路径引入</h3><h4 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h4><p>pom.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;sun.javax.websocket&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1&lt;/version&gt;</span><br><span class="line"> &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line"> &lt;systemPath&gt;$&#123;project.basedir&#125;/lib/javax.websocket-api-1.1.jar&lt;/systemPath&gt;        </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>${project.basedir} 指的是项目目录，可以理解为pom.xml所在目录，</p><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20191023193346.png" alt></p><p>eclipse上操作参考：<a href="https://blog.csdn.net/TrayLei/article/details/88867834" target="_blank" rel="noopener">https://blog.csdn.net/TrayLei/article/details/88867834</a></p><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>maven打包的过程中加入我们这个jar包 </p><p>pom.xml    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 加载本地jar包 --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;webResources&gt;</span><br><span class="line">&lt;resource&gt;</span><br><span class="line">&lt;directory&gt;$&#123;project.basedir&#125;/lib&lt;/directory&gt;</span><br><span class="line">&lt;targetPath&gt;WEB-INF/lib&lt;/targetPath&gt;</span><br><span class="line">&lt;filtering&gt;false&lt;/filtering&gt;</span><br><span class="line">&lt;includes&gt;</span><br><span class="line">&lt;include&gt;**/*.jar&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br><span class="line">&lt;/resource&gt;</span><br><span class="line">&lt;/webResources&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p>ps：TODO 待测试</p><p>参考：<a href="https://www.cnblogs.com/Weagle/p/5358480.html" target="_blank" rel="noopener">https://www.cnblogs.com/Weagle/p/5358480.html</a></p><h3 id="方法三（将jar包安装至本地仓库后使用pom文件直接引入）不推荐"><a href="#方法三（将jar包安装至本地仓库后使用pom文件直接引入）不推荐" class="headerlink" title="方法三（将jar包安装至本地仓库后使用pom文件直接引入）不推荐"></a>方法三（将jar包安装至本地仓库后使用pom文件直接引入）不推荐</h3><h4 id="step1-1"><a href="#step1-1" class="headerlink" title="step1"></a>step1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=&lt;packaging&gt;</span><br></pre></td></tr></table></figure><blockquote><p>mvn install:install-file<br>-Dfile=jar包的位置<br>-DgroupId=pom文件里的groupId<br>-DartifactId=pom文件里的artifactId<br>-Dversion=pom文件里的version<br>-Dpackaging=jar </p></blockquote><p>eg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install:install-file -Dfile=javax.websocket-api-1.1.jar -DgroupId=sun.javax.websocket -DartifactId=javax.websocket-api -Dversion=1.1 -Dpackaging=jar</span><br></pre></td></tr></table></figure><h4 id="setp2"><a href="#setp2" class="headerlink" title="setp2"></a>setp2</h4><p>pom.xml中添加：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;sun.javax.websocket&lt;/groupId&gt;    &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt;    &lt;version&gt;1.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>参考：<a href="https://www.cnblogs.com/sueyyyy/p/10571473.html" target="_blank" rel="noopener">https://www.cnblogs.com/sueyyyy/p/10571473.html</a></p><p>总结：这种方法弊端较大，程序的可维护性以及移植性较低。例如当你改变本地<strong>Maven</strong>仓库时需要重新安装。如果引用此<code>JAR</code>的项目是多人协调工作的项目，则每个人都要将其安装在自己的本地仓库。</p><h3 id="方案三-JAR文件被安装在一个单独的仓库"><a href="#方案三-JAR文件被安装在一个单独的仓库" class="headerlink" title="方案三 JAR文件被安装在一个单独的仓库"></a>方案三 <code>JAR</code>文件被安装在一个单独的仓库</h3><h4 id="step1-2"><a href="#step1-2" class="headerlink" title="step1"></a>step1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=&lt;path-to-file&gt; -DgroupId=&lt;group-id&gt; -DartifactId=&lt;artifact-id&gt; -Dversion=&lt;version&gt; -Dpackaging=jar -Durl=file:./maven-repository/ -DrepositoryId=maven-repository -DupdateReleaseInfo=true</span><br></pre></td></tr></table></figure><p>解释参考上面</p><h4 id="step2-1"><a href="#step2-1" class="headerlink" title="step2"></a>step2</h4><h4 id="在pom-xml中如下使用"><a href="#在pom-xml中如下使用" class="headerlink" title="在pom.xml中如下使用"></a>在<code>pom.xml</code>中如下使用</h4><p>申明仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;maven-repository&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;file:///$&#123;project.basedir&#125;/maven-repository&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br></pre></td></tr></table></figure><p>然后添加引用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baidu.app&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bdpush&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="方案四-发布到自己的私服上-推荐"><a href="#方案四-发布到自己的私服上-推荐" class="headerlink" title="方案四 发布到自己的私服上 推荐"></a>方案四 发布到自己的私服上 推荐</h3><p>同方案三 </p><p><code>-Durl</code>地址设置为自己的私服地址，注意在pom.xml中自己的私服仓库声明</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/ShuSheng0007/article/details/78547264/" target="_blank" rel="noopener">https://blog.csdn.net/ShuSheng0007/article/details/78547264/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TODO&lt;/p&gt;
&lt;p&gt;maven引入本地jar&lt;/p&gt;
    
    </summary>
    
      <category term="技术\WEB\工具\maven" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-WEB-%E5%B7%A5%E5%85%B7-maven/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC接收数组请求参数</title>
    <link href="http://disanshijie.top/post/6555af5b.html"/>
    <id>http://disanshijie.top/post/6555af5b.html</id>
    <published>2019-10-17T05:59:37.000Z</published>
    <updated>2019-11-04T13:03:59.078Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TODO 测试<br><a id="more"></a></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#test&quot;).click(function()&#123;</span><br><span class="line">    var testData=&#123;&quot;nameIds&quot;: [1,2,3], &quot;age&quot;: 18&#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:&quot;POST&quot;,</span><br><span class="line">        url: basePath + &quot;/test/testInOut&quot;,</span><br><span class="line">        dataType:&quot;json&quot;,</span><br><span class="line">        contentType:&quot;application/x-www-form-urlencoded&quot;, // 指定这个协议很重要</span><br><span class="line">        data:faultList, //只有这一个参数，json格式，后台解析为实体，后台可以直接用</span><br><span class="line">        success:function(data)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//controller层</span><br><span class="line"> @RequestMapping(value = &quot;/test/testInOut&quot;)</span><br><span class="line"> @ResponseBody</span><br><span class="line"> public void testInOut(Integer[] nameIds, Integer age)&#123; </span><br><span class="line">      System.out.println(nameIds, age) ;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="基于-RequestBody"><a href="#基于-RequestBody" class="headerlink" title="基于@RequestBody"></a>基于@RequestBody</h2><h3 id="方案1："><a href="#方案1：" class="headerlink" title="方案1："></a>方案1：</h3><p>推荐：<em> </em> <em> </em> *</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var allFilePaths = new Array();</span><br><span class="line"> </span><br><span class="line">for (var i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">    allFilePaths.push(&quot;xx&quot;+i);</span><br><span class="line">&#125;</span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    url : url,</span><br><span class="line">    type : &apos;POST&apos;,</span><br><span class="line">    dataType: &apos;json&apos;,</span><br><span class="line">    contentType: &quot;application/json&quot;,</span><br><span class="line">    data : JSON.stringify(allFilePaths),//转为json格式</span><br><span class="line">    success : function(col) &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    error : function(col)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;/delFileInfo&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public void delFileInfo(@RequestBody String[] macroPath) throws IOException </span><br><span class="line">    &#123;</span><br><span class="line"> </span><br><span class="line">        for(String sPath :macroPath)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(sPath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">//也可以 @RequestBody List&lt;String&gt; macroPath</span><br></pre></td></tr></table></figure><h3 id="方案1-1："><a href="#方案1-1：" class="headerlink" title="方案1-1："></a>方案1-1：</h3><h4 id="页面js代码："><a href="#页面js代码：" class="headerlink" title="页面js代码："></a>页面js代码：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var userList = new Array();  </span><br><span class="line">userList.push(&#123;name: &quot;李四&quot;,pwd: &quot;123&quot;&#125;);   </span><br><span class="line">userList.push(&#123;name: &quot;张三&quot;,pwd: &quot;332&quot;&#125;);   </span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    type: &quot;POST&quot;,  </span><br><span class="line">    url: &quot;&lt;%=path%&gt;/catalog.do?fn=saveUsers&quot;,  </span><br><span class="line">    data: JSON.stringify(userList),//将对象序列化成JSON字符串  </span><br><span class="line">    dataType:&quot;json&quot;,  </span><br><span class="line">    contentType : &apos;application/json;charset=utf-8&apos;, //设置请求头信息  </span><br><span class="line">    success: function(data)&#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;,  </span><br><span class="line">    error: function(res)&#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Controller方法："><a href="#Controller方法：" class="headerlink" title="Controller方法："></a>Controller方法：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Controller  </span><br><span class="line">@RequestMapping(&quot;/catalog.do&quot;)  </span><br><span class="line">public class CatalogController &#123;  </span><br><span class="line">  </span><br><span class="line">    @RequestMapping(params = &quot;fn=saveUsers&quot;)  </span><br><span class="line">    @ResponseBody  </span><br><span class="line">    public AjaxJson saveUsers(@RequestBody User[] userList) &#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">//也可以用 @RequestBody List&lt;User&gt; userList</span><br></pre></td></tr></table></figure><p>重点：</p><blockquote><p>data: JSON.stringify(userList)</p><p>contentType : ‘application/json;charset=utf-8’</p><p>@RequestBody List<user> userList</user></p></blockquote><h3 id="方案1-2："><a href="#方案1-2：" class="headerlink" title="方案1-2："></a>方案1-2：</h3><p>接收List&lt;Map&lt;String,Object&gt;&gt;集合参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var userList = new Array();  </span><br><span class="line">userList.push(&#123;name: &quot;李四&quot;,pwd: &quot;123&quot;&#125;);   </span><br><span class="line">userList.push(&#123;name: &quot;张三&quot;,pwd: &quot;332&quot;&#125;);   </span><br><span class="line">$.ajax(&#123;  </span><br><span class="line">    type: &quot;POST&quot;,  </span><br><span class="line">    url: &quot;&lt;%=path%&gt;/catalog.do?fn=saveUsers&quot;,  </span><br><span class="line">    data: JSON.stringify(userList),//将对象序列化成JSON字符串  </span><br><span class="line">    dataType:&quot;json&quot;,  </span><br><span class="line">    contentType : &apos;application/json;charset=utf-8&apos;, //设置请求头信息  </span><br><span class="line">    success: function(data)&#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;,  </span><br><span class="line">    error: function(res)&#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Controller  </span><br><span class="line">@RequestMapping(&quot;/catalog.do&quot;)  </span><br><span class="line">public class CatalogController &#123;  </span><br><span class="line">  </span><br><span class="line">    @RequestMapping(params = &quot;fn=saveUsers&quot;)  </span><br><span class="line">    @ResponseBody  </span><br><span class="line">    public AjaxJson saveUsers(@RequestBody List&lt;Map&lt;String,Object&gt;&gt; listMap) &#123;  </span><br><span class="line">        …  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于-RequestParam"><a href="#基于-RequestParam" class="headerlink" title="基于@RequestParam"></a>基于@RequestParam</h2><h3 id="方案1：-1"><a href="#方案1：-1" class="headerlink" title="方案1："></a>方案1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//发送请求到后台，带数组形式的数据。</span><br><span class="line">function testList() &#123;</span><br><span class="line">    var data = getTreeViewCheckedData();</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: APP_NAME + &quot;xxxx/testList&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            list:data</span><br><span class="line">        &#125;,</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        success: function (data) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">//获得数据---以数组的形式存储</span><br><span class="line">function getTreeViewCheckedData() &#123;</span><br><span class="line">    var checkedData = [];</span><br><span class="line">    $(&apos;#shareSetting&apos;).find(&apos;ol.bonsai input:checkbox:checked&apos;).each(function () &#123;</span><br><span class="line">            checkedData.push($(this).val())</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">    return checkedData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//方式一:用list接收前台的数组参数。</span><br><span class="line">   @RequestMapping(value = &quot;/testList&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public JsonResult testList(@RequestParam(required = false, value = &quot;list[]&quot;) List&lt;String&gt; list)&#123;</span><br><span class="line">        return new JsonResult(true,&quot;ok &quot;,null);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">//方式二:用数组接收前台的数组参数。然后转化成list。</span><br><span class="line">   @RequestMapping(value = &quot;/testList&quot;)</span><br><span class="line">   @ResponseBody</span><br><span class="line">   public JsonResult testList(@RequestParam(required = false, value = &quot;list[]&quot;) String[] list)&#123;</span><br><span class="line">      </span><br><span class="line">List&lt;String&gt; newList = Lists.newArrayList(Arrays.asList(list));</span><br><span class="line">       return new JsonResult(true,&quot;ok &quot;,null);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="方案2："><a href="#方案2：" class="headerlink" title="方案2："></a>方案2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input[name=&apos;request&apos;]&quot;).click(function () &#123;</span><br><span class="line">    var data = [];</span><br><span class="line">    $(&quot;input[name=&apos;se&apos;]&quot;).each(function () &#123;</span><br><span class="line">        if ($(this).prop(&quot;checked&quot;)) &#123;</span><br><span class="line">            data.push($(this).val());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: &quot;post&quot;,</span><br><span class="line">        url: &quot;/test/index&quot;,</span><br><span class="line">        data: &#123;&quot;datas&quot;: data.join()&#125;</span><br><span class="line">        dataType: &quot;json&quot;,</span><br><span class="line">        success: function (data) &#123;</span><br><span class="line">            var str = &quot;&quot;;</span><br><span class="line">            for (var i = 0; i &lt; data.length; i++) &#123;</span><br><span class="line">                str += &quot;;name=&quot; + data[i];</span><br><span class="line">            &#125;</span><br><span class="line">            $(&quot;div[name=&apos;rs&apos;]&quot;).html(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function () &#123;</span><br><span class="line">            alert(&quot;出错啦&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.POST)</span><br><span class="line">@ResponseBody</span><br><span class="line">public List test(@RequestParam(&quot;datas&quot;) List&lt;Integer&gt; ids) &#123;</span><br><span class="line">    System.out.println(&quot;ids=&quot; + ids);</span><br><span class="line">    return ids;</span><br><span class="line">&#125;</span><br><span class="line">//或者 @RequestParam(&quot;datas&quot;) Integer[] ids</span><br></pre></td></tr></table></figure><h3 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h3><p>在使用@RequestBody注解时，在SpringMVC环境中，<strong>@RequestBody接收的是一个Json对象的字符串</strong>，而不是一个Json对象。然而在ajax请求往往传的都是Json对象，用 JSON.stringify(data)的方式就能将对象变成字符串。同时ajax请求的时候也要指定dataType: “json”,contentType:”application/json” 这样就可以轻易的将一个对象或者List传到Java端。 <code>@RequestBody与contentType:&quot;application/json&quot;</code>必需配合使用，且数据是字符串。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/sweetgirl520/article/details/79127223" target="_blank" rel="noopener">https://blog.csdn.net/sweetgirl520/article/details/79127223</a></p><p><a href="https://blog.csdn.net/achenyuan/article/details/81114517" target="_blank" rel="noopener">https://blog.csdn.net/achenyuan/article/details/81114517</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TODO 测试&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术\WEB\后台\框架\springMVC" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-WEB-%E5%90%8E%E5%8F%B0-%E6%A1%86%E6%9E%B6-springMVC/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Shell引号区别</title>
    <link href="http://disanshijie.top/post/39823868.html"/>
    <id>http://disanshijie.top/post/39823868.html</id>
    <published>2019-10-03T15:37:32.000Z</published>
    <updated>2019-11-04T13:03:59.015Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>shell ‘ ‘, “ “ 和 <code></code> 的区别<br><a id="more"></a></p><p>单引号’’和双引号””</p><p>控制台执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n=3</span><br></pre></td></tr></table></figure><p>输入：echo ‘$n’    输出：$n</p><p>输入：echo “$n”    输出：3</p><p>反引号<code></code></p><p>反引号<code>是命令替换，**命令替换是指Shell可以先执行</code>中的命令，将输出结果暂时保存，在适当的地方输出**。语法:<code>command</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">DATE=`date`</span><br><span class="line">echo &quot;Date is $DATE&quot;</span><br><span class="line"></span><br><span class="line">USERS=`who | wc -l`</span><br><span class="line">echo &quot;Logged in user are $USERS&quot;</span><br><span class="line"></span><br><span class="line">UP=`date ; uptime`</span><br><span class="line">echo &quot;Uptime is $UP&quot;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Date is Thu Jul  2 03:59:57 MST 2009</span><br><span class="line">Logged in user are 1</span><br><span class="line">Uptime is Thu Jul  2 03:59:57 MST 2009</span><br><span class="line">03:59:57 up 20 days, 14:03,  1 user,  load avg: 0.13, 0.07, 0.15</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/suifengpiao_2011/article/details/72453034" target="_blank" rel="noopener">https://blog.csdn.net/suifengpiao_2011/article/details/72453034</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell ‘ ‘, “ “ 和 &lt;code&gt;&lt;/code&gt; 的区别&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务器" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/"/>
    
      <category term="系统" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Shell重定向区别</title>
    <link href="http://disanshijie.top/post/f9fec369.html"/>
    <id>http://disanshijie.top/post/f9fec369.html</id>
    <published>2019-10-03T15:18:32.000Z</published>
    <updated>2019-11-04T13:03:59.069Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>shell中输入输出重定向，＞、＞＞、＜、＜＜、＞/dev/null、2＞&amp;1、＜＜end、＜＜EOF等</p><p>单个 <code>&gt;</code> 覆盖重写 <code>&gt;&gt;</code> 尾部追加内容</p><p>使用<code>nohup command &amp;</code>命令形式来启动一些后台程序</p><p><code>command &gt;/dev/null 2&gt;&amp;1</code>  将两个输出（标准和错误）绑定在一起，并重定向到 <code>&gt;/dev/null</code> 也就是丢弃输出</p><a id="more"></a><p><strong>前言</strong></p><p>相信大家经常能在shell脚本中发现<code>&gt;/dev/null 2&gt;&amp;1</code>这样的语句。以前的我并没有去深入地理解这段命令的作用，照搬照用，直到上周我将这段命令不小心写成了<code>2&gt;&amp;1 &gt;/dev/null</code>，出了一点小问题之后，我才开始去了解这段命令背后的“玄机”。</p><p><strong>shell重定向介绍</strong></p><p>就像我们平时写的程序一样，一段程序会处理外部的输入，然后将运算结果输出到指定的位置。在交互式的程序中，输入来自用户的键盘和鼠标，结果输出到用户的屏幕，甚至播放设备中。而对于某些后台运行的程序，输入可能来自于外部的一些文件，运算的结果通常又写到其他的文件中。而且程序在运行的过程中，会有一些关键性的信息，比如异常堆栈，外部接口调用情况等，这些都会统统写到日志文件里。</p><p>shell脚本也一样，但是我们一般在使用shell命令的时候，更多地还是通过键盘输入，然后在屏幕上查看命令的执行结果。如果某些情况下，我们需要将shell命令的执行结果存储到文件中，那么我们就需要使用输入输出的重定向功能。</p><p><strong>文件描述符</strong></p><p>当执行shell命令时，会默认打开3个文件，每个文件有对应的文件描述符来方便我们使用：</p><table><thead><tr><th>类型</th><th>文件描述符</th><th>默认情况</th><th>对应文件句柄位置</th></tr></thead><tbody><tr><td>标准输入（standard input）</td><td>0</td><td>从键盘获得输入</td><td>/proc/self/fd/0</td></tr><tr><td>标准输出（standard output）</td><td>1</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/1</td></tr><tr><td>错误输出（error output）</td><td>2</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/2</td></tr></tbody></table><p>所以我们平时在执行shell命令中，都默认是从键盘获得输入，并且将结果输出到控制台上。但是我们可以通过更改文件描述符默认的指向，从而实现输入输出的重定向。比如我们将1指向文件，那么标准的输出就会输出到文件中。</p><p><strong>输出重定向</strong></p><p>输出重定向的使用方式很简单，基本的一些命令如下：</p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>command &gt;filename</td><td>把标准输出重定向到新文件中</td></tr><tr><td>command 1&gt;filename</td><td>同上</td></tr><tr><td>command &gt;&gt;filename</td><td>把标准输出追加到文件中</td></tr><tr><td>command 1&gt;&gt;filename</td><td>同上</td></tr><tr><td>command 2&gt;filename</td><td>把标准错误重定向到新文件中</td></tr><tr><td>command 2&gt;&gt;filename</td><td>把标准错误追加到新文件中</td></tr></tbody></table><p>我们使用&gt;或者&gt;&gt;对输出进行重定向。符号的左边表示文件描述符，如果没有的话表示1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。</p><p>为了更好地理解输出重定向，感受重定向的“魅力”，我们看一下以下的例子：我们创建一个测试目录，目录下面仅有一个a.txt文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># tree</span><br><span class="line">.</span><br><span class="line">└── a.txt</span><br><span class="line">0 directories, 1 file</span><br><span class="line"># ls a.txt b.txt</span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>在我们执行<code>ls a.txt b.txt</code>之后，一共有两种输出，其中<code>ls:</code>无法访问b.txt: 没有那个文件或目录是错误输出，a.txt是标准输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ls a.txt b.txt 1&gt;out</span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"># cat out</span><br><span class="line">a.txt</span><br><span class="line"># ls a.txt b.txt &gt;&gt;out</span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"># cat out</span><br><span class="line">a.txt</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>在上述命令中，我们将原来的标准输出重定向到了out文件中，所以控制台只剩下了错误提示。并且当执行了追加操作时，out文件的内容非但没有被清空，反而又多了一条a.txt。</p><p>同理，我们也可以将错误输出重定向到文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ls a.txt b.txt 2&gt;err</span><br><span class="line">a.txt</span><br><span class="line"># cat err</span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"># ls a.txt b.txt &gt;out 2&gt;err</span><br><span class="line"># cat out</span><br><span class="line">a.txt</span><br><span class="line"># cat err</span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>看到这里，朋友们可能会发现<code>&gt;out 2&gt;err</code>和我们在一开头提到的<code>&gt;/dev/null 2&gt;&amp;1</code>已经很像了，别急，这待会再说。</p><p><strong>输入重定向</strong></p><p>在理解了输出重定向之后，理解输入重定向就会容易得多。对输入重定向的基本命令如下：</p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>command &lt;filename</td><td>以filename文件作为标准输入</td></tr><tr><td>command 0&lt;filename</td><td>同上</td></tr><tr><td>command &lt;&lt;delimiter</td><td>从标准输入中读入，直到遇到delimiter分隔符</td></tr></tbody></table><p>我们使用&lt;对输入做重定向，如果符号左边没有写值，那么默认就是0。</p><p>我们这次以cat命令为例，如果cat后面没有跟文件名的话，那它的作用就是将标准输入（比如键盘）回显到标准输出（比如屏幕）上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cat</span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">test</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>我们可以将利用输入重定向，将我们在键盘上敲入的字符写入到文件中。我们需要使用ctrl+c来结束输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`# cat &gt;out``123``test``^C``# cat out``123``test`</span><br></pre></td></tr></table></figure><p>好了，此时我们觉得自己在键盘上敲比较累，还是直接让cat读取一个文件吧。那么我们需要利用输入重定向：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># cat input</span><br><span class="line">aaa</span><br><span class="line">111</span><br><span class="line"># cat &gt;out &lt;input</span><br><span class="line"># cat out</span><br><span class="line">aaa</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>神奇的事情发生了，out文件里面的内容被替换成了input文件里的内容。那么&lt;&lt;又是什么作用呢？我们再看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`# cat &gt;out &lt;&lt;end``&gt; 123``&gt; ``test``&gt; end``# cat out``123``test`</span><br></pre></td></tr></table></figure><p>我们看到，当我们输入完<code>cat &gt;out &lt;&lt;end</code>，然后敲下回车之后，命令并没有结束，此时cat命令像一开始一样，等待你给它输入数据。然后当我们敲入end之后，cat命令就结束了。end之前输入的字符都已经被写入到了out文件中。这就是输入分割符的作用。</p><p><strong>高级用法</strong></p><p><strong>重定向绑定</strong></p><p>好了，在有了以上知识的基础上，我们再来看开头提到的<code>&gt;/dev/null 2&gt;&amp;1</code>。这条命令其实分为两命令，一个是<code>&gt;/dev/null</code>，另一个是<code>2&gt;&amp;1</code>。</p><p><strong>1.   &gt;/dev/null</strong></p><p>这条命令的作用是将标准输出1重定向到<code>/dev/null</code>中。 <code>/dev/null</code>代表linux的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了<code>&gt;/dev/null</code>之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p><p><strong>2. 2  &gt;&amp;1</strong></p><p>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</p><p>2&gt;&amp;1，可以这样理解：按照前面讲解的知识，“2&gt;”表示要把标准错误信息进行重定向，一般来说，重定向的目标是某个文件，而这条语句把重定向的目标设置成了文件描述符1的输入了，也即“&amp;1”，也即，fd2的输出会被送到fd1的输入中去，后果就是，fd2的输入从fd1的输出口送了出来，流程是这样的：fd2输入 -&gt; fd2输出 -&gt; fd1的输入 -&gt; fd的输出。</p><p>linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以<code>&gt;/dev/null 2&gt;&amp;1</code>的作用就是让标准输出重定向到<code>/dev/null</code>中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了<code>/dev/null</code>中，错误输出同样也被丢弃了。执行了这条命令之后，该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><p><strong>&gt;/dev/null 2&gt;&amp;1 VS 2&gt;&amp;1 &gt;/dev/null</strong></p><p>再回到文章的开头，我说我弄反了<code>&gt;/dev/null</code>和<code>2&gt;&amp;1</code>拼装的顺序，导致出了一点小问题。乍眼看这两条命令貌似是等同的，但其实大为不同。刚才提到了，linux在执行shell命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令。那么我们同样从左到右地来分析<code>2&gt;&amp;1 &gt;/dev/null</code>：</p><p><code>2&gt;&amp;1</code>，将错误输出绑定到标准输出上。由于此时的标准输出是默认值，也就是输出到屏幕，所以错误输出会输出到屏幕。<br><code>&gt;/dev/null</code>，将标准输出1重定向到<code>/dev/null</code>中。</p><p>我们用一个表格来更好地说明这两条命令的区别：</p><table><thead><tr><th>命令</th><th>标准输出</th><th>错误输出</th></tr></thead><tbody><tr><td>&gt;/dev/null 2&gt;&amp;1</td><td>丢弃</td><td>丢弃</td></tr><tr><td>2&gt;&amp;1 &gt;/dev/null</td><td>丢弃</td><td>屏幕</td></tr></tbody></table><p><strong>&gt;/dev/null 2&gt;&amp;1 VS &gt;/dev/null 2&gt;/dev/null</strong></p><p>那么可能会有些同学会疑问，为什么要用重定向绑定，而不是像<code>&gt;/dev/null 2&gt;/dev/null</code>这样子重复一遍呢。</p><p>为了回答这个问题，我们回到刚才介绍输出重定向的场景。我们尝试将标准输出和错误输出都定向到out文件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`# ls a.txt b.txt &gt;out 2&gt;out``# cat out``a.txt``无法访问b.txt: 没有那个文件或目录`</span><br></pre></td></tr></table></figure><p>WTF？竟然出现了乱码，这是为啥呢？这是因为采用这种写法，标准输出和错误输出会抢占往out文件的管道，所以可能会导致输出内容的时候出现缺失、覆盖等情况。现在是出现了乱码，有时候也有可能出现只有error信息或者只有正常信息的情况。不管怎么说，采用这种写法，最后的情况是无法预估的。</p><p>而且，由于out文件被打开了两次，两个文件描述符会抢占性的往文件中输出内容，所以整体IO效率不如<code>&gt;/dev/null 2&gt;&amp;1</code>来得高。</p><p><strong>nohup结合</strong></p><p>我们经常使用<code>nohup command &amp;</code>命令形式来启动一些后台程序，比如一些java服务：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`# nohup java -jar xxxx.jar &amp;`</span><br></pre></td></tr></table></figure><p>为了不让一些执行信息输出到前台（控制台），我们还会加上刚才提到的<code>&gt;/dev/null 2&gt;&amp;1</code>命令来丢弃所有的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`# nohup java -jar xxxx.jar &gt;/dev/null 2&gt;&amp;1 &amp;`</span><br></pre></td></tr></table></figure><p><strong>总结</strong></p><p>本文主要介绍了linux重定向的原理以及一些基本命令，并且详细地分析了<code>&gt;/dev/null 2&gt;&amp;1</code>这个命令以及一些注意点。</p><p>总而言之，在工作中用到最多的就是<code>nohup command &gt;/dev/null 2&gt;&amp;1 &amp;</code>命令，希望大家能够好好掌握。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_31073871/article/details/80810306" target="_blank" rel="noopener">https://blog.csdn.net/qq_31073871/article/details/80810306</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell中输入输出重定向，＞、＞＞、＜、＜＜、＞/dev/null、2＞&amp;amp;1、＜＜end、＜＜EOF等&lt;/p&gt;
&lt;p&gt;单个 &lt;code&gt;&amp;gt;&lt;/code&gt; 覆盖重写 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 尾部追加内容&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;nohup command &amp;amp;&lt;/code&gt;命令形式来启动一些后台程序&lt;/p&gt;
&lt;p&gt;&lt;code&gt;command &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/code&gt;  将两个输出（标准和错误）绑定在一起，并重定向到 &lt;code&gt;&amp;gt;/dev/null&lt;/code&gt; 也就是丢弃输出&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务器" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/"/>
    
      <category term="系统" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Shell判断是否包含某个字符串</title>
    <link href="http://disanshijie.top/post/3a7ba840.html"/>
    <id>http://disanshijie.top/post/3a7ba840.html</id>
    <published>2019-10-03T08:18:44.000Z</published>
    <updated>2019-11-04T13:03:59.011Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>Shell脚本中判断字符串是否被包含在内<br><a id="more"></a></p><h3 id="使用操作符"><a href="#使用操作符" class="headerlink" title="使用操作符~"></a>使用操作符~</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;abcdefgh&quot;</span><br><span class="line">str2=&quot;def&quot;</span><br><span class="line">if [[ $str1 =~ $str2 ]];then</span><br><span class="line">    echo &quot;包含&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;不包含&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="字段-grep"><a href="#字段-grep" class="headerlink" title="字段 grep"></a>字段 grep</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;abcdefgh&quot;</span><br><span class="line">str2=&quot;def&quot;</span><br><span class="line">result=$(echo $str1 | grep &quot;$&#123;str2&#125;&quot;)</span><br><span class="line">if [[ &quot;$result&quot; != &quot;&quot; ]];then</span><br><span class="line">    echo &quot;包含&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;不包含&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="正则表达式中的通配符"><a href="#正则表达式中的通配符" class="headerlink" title="正则表达式中的通配符 *"></a>正则表达式中的通配符 *</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1=&quot;abcdefgh&quot;</span><br><span class="line">str2=&quot;def&quot;</span><br><span class="line">if [[ $str1 == *$str2* ]];then</span><br><span class="line">    echo &quot;包含&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;不包含&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Shell脚本中判断字符串是否被包含在内&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="服务器" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Linux" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/"/>
    
      <category term="系统" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Linux/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>idea删除项目</title>
    <link href="http://disanshijie.top/post/a92a2990.html"/>
    <id>http://disanshijie.top/post/a92a2990.html</id>
    <published>2019-09-29T11:25:26.000Z</published>
    <updated>2019-11-04T13:03:59.060Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>IntelliJ IDEA删除项目<br><a id="more"></a></p><p>总共三步</p><ol><li><p>File -&gt; Close Poject 关掉你需要删除的项目</p></li><li><p>File -&gt; Open Recent -&gt; Manage Projects 如下图</p><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20190929192703.png" alt></p><p>出现弹出框 鼠标移到你要删除的项目上面，点击右上角的叉号</p><p><img src="https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20190929192722.png" alt></p></li><li><p>找到你项目的存放位置（如果没有做其他设置就在workspace），然后删除文件夹即可</p></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/zhangqian27/p/7698148.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhangqian27/p/7698148.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IntelliJ IDEA删除项目&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活\计算机\软件\idea" scheme="http://disanshijie.top/categories/%E7%94%9F%E6%B4%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA-%E8%BD%AF%E4%BB%B6-idea/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>计算平房根</title>
    <link href="http://disanshijie.top/post/fe56fd9a.html"/>
    <id>http://disanshijie.top/post/fe56fd9a.html</id>
    <published>2019-09-15T06:15:43.000Z</published>
    <updated>2019-11-04T13:03:59.035Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>二分法计算 平方根<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 二分法计算 平方根</span><br><span class="line"> * @param val 需要的数</span><br><span class="line"> * @param low 结果区间的小边界</span><br><span class="line"> * @param high 结果区间的大边界</span><br><span class="line"> * @param e 保留几位</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public static double sqrt2(double val,double low,double high,int e) &#123;</span><br><span class="line">    double EPSILON = 0.01; //默认保留2位</span><br><span class="line">    if(e!=0)&#123;</span><br><span class="line">        int c=1;</span><br><span class="line">        while (e&gt;0)&#123;</span><br><span class="line">            c =c*10;</span><br><span class="line">            e--;</span><br><span class="line">        &#125;</span><br><span class="line">        EPSILON = 1.0 / c;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;精确度：&quot;+EPSILON);</span><br><span class="line"></span><br><span class="line">    //double val=2, low = 1.4, high = 1.5;</span><br><span class="line">    double mid = (low + high) / 2;</span><br><span class="line">    while (high - low &gt; EPSILON) &#123;</span><br><span class="line">        if (mid * mid &gt; val) &#123;</span><br><span class="line">            high = mid;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            low = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = (high + low) / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    return mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">    //3的平方根为：1.7320508075688772935274463415059</span><br><span class="line">    double res = sqrt2(3,1.5, 2.0,8);</span><br><span class="line">    System.out.println(res); //结果：1.7320508107542991</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps：double运算结果后9位是不准确的</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/0cb23d985189" target="_blank" rel="noopener">https://www.jianshu.com/p/0cb23d985189</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二分法计算 平方根&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术\编程\Java\算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-%E7%BC%96%E7%A8%8B-Java-%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>冒泡排序</title>
    <link href="http://disanshijie.top/post/14e6f1eb.html"/>
    <id>http://disanshijie.top/post/14e6f1eb.html</id>
    <published>2019-09-14T15:54:11.000Z</published>
    <updated>2019-11-09T15:37:26.965Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TODO<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;br&gt; </span><br><span class="line"> * 〈〉&lt;br&gt; </span><br><span class="line"> *</span><br><span class="line"> * @author sunbo</span><br><span class="line"> * @create 2019/9/14</span><br><span class="line"> * @since 1.0.0</span><br><span class="line"> */</span><br><span class="line">public class BubbleSort &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static int[] arr=&#123;2,1,5,6,4,8,3&#125;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 冒泡排序 ![](https://gitee.com/sunjinchao/cloudfile_C01/raw/master/img/20190914230252.png)</span><br><span class="line">     * 此方式每次交换后 都把数组最后一个位置的数据找到了</span><br><span class="line">     * 例子：2,1,5,6,4,8,3</span><br><span class="line">     * 结果：1,2,3,4,5,6,8</span><br><span class="line">     * @param arr</span><br><span class="line">     */</span><br><span class="line">    public static void bubbleSort1(int[] arr)&#123;</span><br><span class="line">        int len=arr.length;</span><br><span class="line">        //每次外循环结束都会将最后一位确定，循环len-1次，最后一次不需要交换了</span><br><span class="line">        //ps：也可以i&lt;len 这样内层循环最后一次不会执行的，结果都一样</span><br><span class="line">        for (int i = 0; i &lt; len-1; i++) &#123;</span><br><span class="line">            boolean flag=false;</span><br><span class="line">            //每次交换都会将第（len-i）位数据确定</span><br><span class="line">            //for控制交换次数 从下标0开始 到len-i-1位</span><br><span class="line">            for (int j = 0; j &lt;len-i-1; j++) &#123;</span><br><span class="line">                //比较</span><br><span class="line">                if(arr[j] &gt;arr[j+1])&#123;</span><br><span class="line">                    int temp=arr[j];</span><br><span class="line">                    arr[j] =arr[j+1];</span><br><span class="line">                    arr[j+1]=temp;</span><br><span class="line">                    flag=true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果交换算法中 没有需要交换的说明 数组已经有序了，结束全部循环</span><br><span class="line">            if(!flag)&#123;break;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 冒泡排序</span><br><span class="line">     * 此方式每次交换后 都把数组最前一个位置的最小数据找到了</span><br><span class="line">     * @param arr</span><br><span class="line">     */</span><br><span class="line">    public static void bubbleSort2(int[] arr)&#123;</span><br><span class="line">        //每次内循环确定 最前一个位置的最小数据</span><br><span class="line">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            boolean flag=false;</span><br><span class="line">            //比较下标 第i+1 到 arr.length-1 的数组</span><br><span class="line">            for(int j=arr.length-1;j&gt;=i+1;j--)&#123;</span><br><span class="line">                if(arr[j] &lt; arr[j-1])&#123;</span><br><span class="line">                    //交换</span><br><span class="line">                    int t=arr[j];arr[j]=arr[j-1];arr[j-1]=t;</span><br><span class="line">                    flag=true;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //如果交换算法中 没有需要交换的说明 数组已经有序了，结束全部循环</span><br><span class="line">            if(!flag)&#123;break;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void print(int[] arr)&#123;</span><br><span class="line">        String str=&quot;&quot;;</span><br><span class="line">        for (int o : arr) &#123;</span><br><span class="line">            str += o+&quot;,&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        print(arr);</span><br><span class="line">        //bubbleSort1(arr);</span><br><span class="line">        bubbleSort2(arr);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TODO&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/"/>
    
      <category term="算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>多个线程顺序输出</title>
    <link href="http://disanshijie.top/post/80989b29.html"/>
    <id>http://disanshijie.top/post/80989b29.html</id>
    <published>2019-09-14T09:26:23.000Z</published>
    <updated>2019-11-09T15:37:36.973Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>多个线程顺序输出面试题</p><a id="more"></a><h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>编写一个程序，开启 3 个线程，这三个线程 分别输出 A、B、C，每个线程将自己的内容在屏幕上打印 10 遍，要求输出的结果必须按顺序显示。如：ABCABCABC…… </p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p><strong>思路：</strong>先定义一个公共标志numId=1 范围1~3，定义三个线程，</p><p>每个线程内部：自循环10次，循环内加锁(ps：保证这个线程内的每个循环执行是原子的)，锁内判断当前 while(numId ==1 ) 输出A，设置numId=2 唤醒 线程2 ，while(numId !=1 )  await() 等待</p><p><strong>实现方式1：</strong></p><p>使用了 ReentrantLock 公平锁 ；用newCondition来指定具体某个线程的唤醒</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">package concurrent;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.locks.Condition;</span><br><span class="line">import java.util.concurrent.locks.Lock;</span><br><span class="line">import java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line">class AlternateDemo &#123;</span><br><span class="line">    //标志当前由哪一个线程输出，1代表A，2代表B，3代表C</span><br><span class="line">    private int number = 1;</span><br><span class="line"></span><br><span class="line">    Lock lock = new ReentrantLock();</span><br><span class="line"></span><br><span class="line">    //Condition的强大之处在于它可以为多个线程间建立不同的Condition</span><br><span class="line">    Condition condition1 = lock.newCondition();</span><br><span class="line">    Condition condition2 = lock.newCondition();</span><br><span class="line">    Condition condition3 = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    // loopNum:当前循环轮数</span><br><span class="line">    public void loopA(int loopNum) &#123;</span><br><span class="line">        //上锁</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            while (number != 1) &#123;</span><br><span class="line">                //等待</span><br><span class="line">                condition1.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;, currentLoopNum is &quot; + loopNum);</span><br><span class="line">            number = 2;</span><br><span class="line">            //唤醒</span><br><span class="line">            condition2.signal();</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //确保释放锁</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void loopB(int loopNum) &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            while (number != 2) &#123;</span><br><span class="line">                condition2.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;, currentLoopNum is &quot; + loopNum);</span><br><span class="line">            number = 3;</span><br><span class="line">            condition3.signal();</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void loopC(int loopNum) &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            while (number != 3) &#123;</span><br><span class="line">                condition3.await();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;, currentLoopNum is &quot; + loopNum);</span><br><span class="line">            number = 1;</span><br><span class="line">            condition1.signal();</span><br><span class="line"></span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class TestABCAlternate &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        AlternateDemo ad = new AlternateDemo();</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i = 0; i &lt; 10; i++)</span><br><span class="line">                    ad.loopA(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;A&quot;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i = 0; i &lt; 10; i++)</span><br><span class="line">                    ad.loopB(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;B&quot;).start();</span><br><span class="line"></span><br><span class="line">        new Thread(new Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                for (int i = 0; i &lt; 10; i++)</span><br><span class="line">                    ad.loopC(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &quot;C&quot;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现方式2：</strong> 推荐</p><p>使用 synchronized 锁住执行方法体；使用 notifyAll 来唤醒其他线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">package www.java.test;</span><br><span class="line"></span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">class Print&#123;</span><br><span class="line">    int flag = 1;</span><br><span class="line">    int count = 0;</span><br><span class="line"></span><br><span class="line">    public int getCount() &#123;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public synchronized void printA()&#123;</span><br><span class="line">        while(flag != 1)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(Thread.currentThread().getName());</span><br><span class="line">        count++;</span><br><span class="line">        flag = 2;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void printB()&#123;</span><br><span class="line">        while(flag != 2)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(Thread.currentThread().getName());</span><br><span class="line">        count++;</span><br><span class="line">        flag = 3;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void printC()&#123;</span><br><span class="line">        while(flag != 3)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(Thread.currentThread().getName());</span><br><span class="line">        count++;</span><br><span class="line">        flag = 1;</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class MyThread implements Runnable&#123;</span><br><span class="line">    private Print print;</span><br><span class="line"></span><br><span class="line">    public MyThread(Print print) &#123;</span><br><span class="line">        this.print = print;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        int i = 1;</span><br><span class="line">        while (i &lt;= 10) &#123;    </span><br><span class="line">        //while(print.getCount() &lt; 16)&#123;//确保每个打印5遍</span><br><span class="line">            if(Thread.currentThread().getName().equals(&quot;A&quot;))&#123;</span><br><span class="line">                print.printA();</span><br><span class="line">            &#125;else if(Thread.currentThread().getName().equals(&quot;B&quot;))&#123;</span><br><span class="line">                print.printB();</span><br><span class="line">            &#125;else if(Thread.currentThread().getName().equals(&quot;C&quot;))&#123;</span><br><span class="line">                print.printC();</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Print print = new Print();</span><br><span class="line">        MyThread mt = new MyThread(print);</span><br><span class="line">        Thread th1 = new Thread(mt,&quot;A&quot;);</span><br><span class="line">        Thread th2 = new Thread(mt,&quot;B&quot;);</span><br><span class="line">        Thread th3 = new Thread(mt,&quot;C&quot;);</span><br><span class="line">        th1.start();</span><br><span class="line">        th2.start();</span><br><span class="line">        th3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h3><p><strong>思路：</strong>加锁用ReentrantLock/synchronized或者 volatile 修饰变量；取余的方式判断是否轮到当前线程执行</p><p><strong>实现一：</strong> 推荐</p><p>ReentrantLock来解决, 还有个state整数用来判断轮到谁执行了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">public class PrintTwo &#123;</span><br><span class="line">    private static Lock lock = new ReentrantLock();//通过JDK5中的锁来保证线程的访问的互斥</span><br><span class="line">    private static int state = 0; </span><br><span class="line">    static class First extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                if (state % 4 == 0) &#123;</span><br><span class="line">                    System.out.println(&quot;1&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Second extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                if (state % 4 == 1) &#123;</span><br><span class="line">                    System.out.println(&quot;2&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Third extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                if (state % 4 == 2) &#123;</span><br><span class="line">                    System.out.println(&quot;3&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Forth extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                lock.lock();</span><br><span class="line">                if (state % 4 == 3) &#123;</span><br><span class="line">                    System.out.println(&quot;4&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        First first = new First();</span><br><span class="line">        Second second = new Second();</span><br><span class="line">        Third third = new Third();</span><br><span class="line">        Forth forth = new Forth();</span><br><span class="line">        first.start();</span><br><span class="line">        second.start();</span><br><span class="line">        third.start();</span><br><span class="line">        forth.start();</span><br><span class="line">     &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现二：</strong> 特别推荐</p><p>volatile，保证被修饰的变量在读写前都会与主存交互更新。一个变量被volatile修饰后，则不同线程对这个变量进行操作时，总是从内存中读取最新值，即每次更新对其他线程都是立即可见的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">public class PrintThree &#123;</span><br><span class="line">    volatile static int state = 0;</span><br><span class="line"> </span><br><span class="line">    static class First extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (state % 4 == 0) &#123;</span><br><span class="line">                    System.out.println(&quot;1&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Second extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (state % 4 == 1) &#123;</span><br><span class="line">                    System.out.println(&quot;2&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Third extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (state % 4 == 2) &#123;</span><br><span class="line">                    System.out.println(&quot;3&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class Forth extends Thread &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                if (state % 4 == 3) &#123;</span><br><span class="line">                    System.out.println(&quot;4&quot;);</span><br><span class="line">                    state++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        First first = new First();</span><br><span class="line">        Second second = new Second();</span><br><span class="line">        Third third = new Third();</span><br><span class="line">        Forth forth = new Forth();</span><br><span class="line">        first.start();</span><br><span class="line">        second.start();</span><br><span class="line">        third.start();</span><br><span class="line">        forth.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现三：</strong></p><p>Semphore,完成对信号量的控制，可以控制某个资源可以被同时访问的个数，通过acquire()获取一个许可，如果没有就等待，而release()释放一个许可。（另外，semphore还可以用来控制同时访问一个方法的线程数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">package Thread;</span><br><span class="line"> </span><br><span class="line">import java.util.concurrent.Semaphore;</span><br><span class="line"> </span><br><span class="line">public class Print1234 &#123;</span><br><span class="line">    public static Semaphore sem1;</span><br><span class="line">    public static Semaphore sem2;</span><br><span class="line">    public static Semaphore sem3;</span><br><span class="line">    public static Semaphore sem4;</span><br><span class="line"> </span><br><span class="line">    static class FirstThread extends Thread &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    sem1.acquire();</span><br><span class="line">                    System.out.println(&quot;1&quot;);</span><br><span class="line">                    sem2.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class SecondThread extends Thread &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    sem2.acquire();</span><br><span class="line">                    System.out.println(&quot;2&quot;);</span><br><span class="line">                    sem3.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class ThirdThread extends Thread &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    sem3.acquire();</span><br><span class="line">                    System.out.println(&quot;3&quot;);</span><br><span class="line">                    sem4.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    static class ForthThread extends Thread &#123;</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                while (true) &#123;</span><br><span class="line">                    sem4.acquire();</span><br><span class="line">                    System.out.println(&quot;4&quot;);</span><br><span class="line">                    sem1.release();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        sem1 = new Semaphore(1);</span><br><span class="line">        sem2 = new Semaphore(1);</span><br><span class="line">        sem3 = new Semaphore(1);</span><br><span class="line">        sem4 = new Semaphore(1);</span><br><span class="line">        try &#123;</span><br><span class="line">            // 不要有sem1.acquire()</span><br><span class="line">            sem2.acquire();</span><br><span class="line">            sem3.acquire();</span><br><span class="line">            sem4.acquire();</span><br><span class="line">        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        new FirstThread().start();</span><br><span class="line">        new SecondThread().start();</span><br><span class="line">        new ThirdThread().start();</span><br><span class="line">        new ForthThread().start();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h2><p>写两个线程，一个线程打印1~52，另一个线程打印A~Z，打印顺序是12A34B….5152Z</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">package www.java.test;</span><br><span class="line"></span><br><span class="line">class Print&#123;</span><br><span class="line">    int flag = 1;</span><br><span class="line">    int count = 1;</span><br><span class="line">    public synchronized void printNum()&#123;</span><br><span class="line">        while(flag != 1)&#123;</span><br><span class="line">            //此时应该打印字母，让打印数字线程等待</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //打印数字</span><br><span class="line">        System.out.print(2*count - 1);</span><br><span class="line">        System.out.print(2*count);</span><br><span class="line">        flag = 2;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">    public synchronized void printChar()&#123;</span><br><span class="line">        while(flag != 2)&#123;</span><br><span class="line">            //此时应该打印数字,字母打印线程等待</span><br><span class="line">            try &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print((char)(count-1 + &apos;A&apos;));</span><br><span class="line">        //继续前行</span><br><span class="line">        count++;</span><br><span class="line">        flag = 1;</span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Print print = new Print();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for(int i = 0; i &lt; 26; i++)&#123;</span><br><span class="line">                print.printNum();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        new Thread(()-&gt;&#123;</span><br><span class="line">            for(int i = 0; i &lt; 26; i++)&#123;</span><br><span class="line">                print.printChar();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：12A34B56C78D910E1112F1314G1516H1718I1920J2122K2324L2526M2728N293003132P3334Q3536R3738S3940T4142U4344V4546W4748X4950Y5152z</p><ul><li><p>在每一次打印完之后要把flag的值改掉，并且唤醒下一个线程</p></li><li><p>count什么时候++呢？在它打印完一个字母后这才算一个小流程完了，所以是在字母打印线程之后count++</p></li><li><p>还有就是在进行字母打印的时候，要对count-1，因为count的初值是1，再加’A’就是B了，所以要先对count-1,完了之后要把它强转成char</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/anhenzhufeng/article/details/80348400" target="_blank" rel="noopener">https://blog.csdn.net/anhenzhufeng/article/details/80348400</a></p><p><a href="https://blog.csdn.net/huaijiu123/article/details/86370451" target="_blank" rel="noopener">https://blog.csdn.net/huaijiu123/article/details/86370451</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多个线程顺序输出面试题&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="编程" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/"/>
    
      <category term="算法" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF/%E7%BC%96%E7%A8%8B/Java/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>JDK8JVM虚拟机(二)</title>
    <link href="http://disanshijie.top/post/c013e9e0.html"/>
    <id>http://disanshijie.top/post/c013e9e0.html</id>
    <published>2019-09-11T14:38:50.000Z</published>
    <updated>2019-11-04T13:03:59.027Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>TODO<br><a id="more"></a></p><h4 id="java虚拟机对象分配规则："><a href="#java虚拟机对象分配规则：" class="headerlink" title="java虚拟机对象分配规则："></a><strong>java虚拟机对象分配规则：</strong></h4><p>对象优先分配在Eden区，如果Eden区没有足够的空间时，虚拟机执行一次Minor GC。</p><ul><li><p><strong>大对象直接进入老年代</strong>（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。</p></li><li><p><strong>长期存活的对象进入老年代。</strong>虚拟机为每个对象定义了一个年龄计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，知道达到阀值对象进入老年区。</p></li><li><p><strong>动态判断对象的年龄</strong>。如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代。</p></li><li><p><strong>空间分配担保。</strong>每次进行Minor GC时，JVM会计算Survivor区移至老年区的对象的平均大小，如果这个值大于老年区的剩余值大小则进行一次Full GC，如果小于检查HandlePromotionFailure设置，如果true则只进行Monitor GC,如果false则进行Full GC。</p></li></ul><h3 id="GC收集："><a href="#GC收集：" class="headerlink" title="GC收集："></a>GC收集：</h3><ul><li><p>1.GC执行的时间点：具体来讲，这个时间并不是由我们控制，而是由JVM里面设置的GC策略决定的，即使我们调用System.gc（）也没法保证即时生效。</p></li><li><p>2.GC执行针对的目标：简单来说，GC针对的目标时被GC收集器判定为死亡的对象，通常我们使用可达性分析算法来判定。以一系列GC Roots为起点，如果有某个对象没有任何一个GC Roots对其可达（无引用关联）的时候，就会判定这个对象已是可回收的对象，但是这时候对象并没有被完全回收。</p></li><li><p>3.GC执行的流程：接着2来说，当GC拿到一个‘死亡’对象的时候会给其添加一个标记，然后进行筛选，筛选的条件是该对象是否有必要执行finalize（）方法，如果该方法已经被虚拟机执行过finalize方法或者没有覆盖finlize方法，则立即回收，否则将它置于一个F-Queue队列里面并由一个低优先级的Finalizer线程执行它。</p></li><li><p>4.GC使用的算法：</p><ul><li>①标记清除算法：算法执行过程和名字一致，后果是会带来大量内存碎片，如果碰到要放大对象的时候就不得不触发GC </li><li>②复制算法：将内存的可用对象同等的复制到另一块相同大小的内存里，这种方法是使用空间换时间的做法。通常我们的新生代的GC收集都是采用此方法，这也就是为什么Eden：From：To=8：1：1的原因之一 </li><li>③标记整理算法：先标记，再将存活对象移动到一块变成连续的，再清除边界外的部分。</li></ul></li><li><p>5.内存回收的具体实现（针对HotSpot VM）：</p><ul><li><p>①Serial 收集器 ：单线程（Stop The World） 使用标记整理算法，新生代收集器</p></li><li><p>②ParNew收集器：Serial的多线程版本，新生代收集器</p></li><li><p>③Parallel Scavenge收集器：以吞吐量为目标的收集器。Throughtout=运行用户代码时间/（垃圾收集时间+运行用户代码时间）</p></li><li><p>④Serial Old 收集器：Serial 的老年代版本</p></li><li><p>⑤Parallel Old收集器：Parallel Scavenge收集器的老年代版本</p></li><li><p>⑥CMS收集器：以获取最短回收停顿时间为目标，使用标记清除算法，整个过程是跟随余户线程并发执行的，包含4个步骤：</p><p>1）初始标记 2）并发标记 3）重新标记 4)并发清除   其中重新标记是为了修正在用户程序运作而导致变动的那部分对象的标记记录。。它的缺点是对CPU资源敏感和会产生大量内存碎片，还有就是在标记过后用户线程产生的垃圾没法及时清理，必须等待下一次GC</p></li><li><p>⑦G1 收集器：目标是取代CMS收集器并且能独立进行对整个堆空间GC。</p><p>优点：</p><p>​    1）能使用多cpu缩短停顿，通过并发使得用户线程不需要停顿 </p><p>​    2）空间整合：整体基于标记整理算法，局部使用复制算法–不产生内存碎片 </p><p>​    3）停顿可预测，并且能由用户指定 </p><p>​    4）分代收集      第三点的实现实际上是把全区域分割成多个Region进行回收并跟踪，并将各个Region垃圾堆积的价值大小建立优先级并按照优先级回收。</p><p>运作流程：</p><p>​    每个Region维护一个Remembered Set，里面记录了该Region里面对象的引用关系，使得即便新生代的对象引用了老年代的对象也不用全堆扫描。具体流程：1）初始标记2）并发标记3）最终标记4）筛选回收 与CMS的流程的区别在于最后在回收的时候会建立优先级列表，然后根据不同的策略分级回收。</p></li></ul></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.csdn.net/qq_36243399/article/details/79776888" target="_blank" rel="noopener">https://blog.csdn.net/qq_36243399/article/details/79776888</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TODO&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术\编程\Java\JDK" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-%E7%BC%96%E7%A8%8B-Java-JDK/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>按位或,按位异或,按位与</title>
    <link href="http://disanshijie.top/post/62826a47.html"/>
    <id>http://disanshijie.top/post/62826a47.html</id>
    <published>2019-09-01T14:26:52.000Z</published>
    <updated>2019-11-04T13:03:58.975Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>|，^，&amp;(按位或,按位异或,按位与)<br><a id="more"></a></p><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><blockquote><p>与1进行位与&amp;运算，值保持不变；</p><p>与0进行位与&amp;运算，值清0；</p><p>按位与&amp;常用于将整型变量中某些位清0，而其他位保持不变。</p></blockquote><blockquote><p>与1进行位或|运算，值置1；</p><p>与0进行位或|运算，值保持不变；</p><p>按位或|常用于将整型变量中某些位置1，而其他位保持不变。</p></blockquote><blockquote><p>与1进行位异或^运算，值取反；</p><p>与0进行位异或^运算，值保持不变；</p><p>按位异或^常用于将整型变量中某些位取反，而其他位保持不变。</p></blockquote><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>| 按位或:<br>    参与运算的两数各对应的二进位相或.只要对应的二个二进位有一个为1时,结果位就为1<br>        例如: 1|2 : 0001 | 0010 = 0011<br>                 9|5 : 1001 | 0101 = 1101    所以9|5=13</p><p>&amp; 按位与:<br>    参与运算的两数各对应的二进位相与.只有对应的两个二进位均为1时,结果位才为1,否则为0<br>        例如: 1&amp;2 : 0001 &amp; 0010 = 0000<br>                 9&amp;5 : 1001 &amp; 0101 = 0001    所以9&amp;5=1</p><p>^ 按位异或:<br>    参与运算的两数各对应的二进位相异或,当两对应的二进位相异时,结果为1<br>        例如: 1^2 : 0001 ^ 0010 = 0011<br>                 9^5 : 1001 ^ 0101 = 1100    所以9^5=12</p><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://blog.csdn.net/Super_Me_Jason/article/details/79707992" target="_blank" rel="noopener">https://blog.csdn.net/Super_Me_Jason/article/details/79707992</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;|，^，&amp;amp;(按位或,按位异或,按位与)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术\编程\基础" scheme="http://disanshijie.top/categories/%E6%8A%80%E6%9C%AF-%E7%BC%96%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>bat脚本设置开机启动软件</title>
    <link href="http://disanshijie.top/post/887206f7.html"/>
    <id>http://disanshijie.top/post/887206f7.html</id>
    <published>2019-09-01T06:15:49.000Z</published>
    <updated>2019-11-04T13:03:59.046Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><a id="more"></a><h3 id="更新-2019-09-02"><a href="#更新-2019-09-02" class="headerlink" title="更新 2019-09-02"></a>更新 2019-09-02</h3><p>不是很好，还是用win自带的定时任务吧</p><h4 id="创建一个文本文档-mystart-txt-编辑"><a href="#创建一个文本文档-mystart-txt-编辑" class="headerlink" title="创建一个文本文档 mystart.txt 编辑"></a>创建一个文本文档 mystart.txt 编辑</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">::延时20秒启动navicat</span><br><span class="line">ping localhost -n 20</span><br><span class="line">start &quot;&quot; &quot;D:\Project\SQL\PremiumSoft\Navicat Premium 12\navicat.exe&quot;</span><br><span class="line">::再延时25秒启动WinSCP</span><br><span class="line">ping localhost -n 25</span><br><span class="line">start &quot;&quot; &quot;D:\Project\SSH\WinSCP\WinSCP.exe&quot;</span><br><span class="line">::再延时4秒启动Idea工具</span><br><span class="line">ping localhost -n 4</span><br><span class="line">rem start &quot;&quot; &quot;D:\Software\IntelliJ IDEA 2018.3.4\bin\idea64.exe&quot;</span><br><span class="line">::执行完命令后关闭cmd命令窗口</span><br><span class="line">taskkill /f /im cmd.exe</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>ps：ping localhost -n 2可以当做是定时器，2 是两秒的意思。根据自己的需求，也可以不设置延时，去掉&amp; ping localhost -n 2即可</p><h4 id="保存，重命名为mystart-bat"><a href="#保存，重命名为mystart-bat" class="headerlink" title="保存，重命名为mystart.bat"></a>保存，重命名为mystart.bat</h4><p>测试 双击运行</p><p>原始</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">::延时2秒启动QQ</span><br><span class="line">start &quot;&quot; &quot;C:\Program Files (x86)\Tencent\QQ\Bin\QQScLauncher.exe&quot; &amp; ping localhost -n 2</span><br><span class="line">::延时3秒启动搜狗浏览器</span><br><span class="line">start &quot;&quot; &quot;C:\Users\Administrator\AppData\Local\SogouExplorer\SogouExplorer.exe&quot; &amp; ping localhost -n 3</span><br><span class="line">::延时4秒启动Idea工具</span><br><span class="line">start &quot;&quot; &quot;D:\Software\IntelliJ IDEA 2018.3.4\bin\idea64.exe&quot; &amp; ping localhost -n 4</span><br><span class="line">::启动cmd.exe程序，因后面启动分布式服务需要执行cmd命令</span><br><span class="line">start &quot;&quot; &quot;C:\Windows\System32\cmd.exe&quot; </span><br><span class="line">::启动分布式服务（开发模式）</span><br><span class="line">d:</span><br><span class="line">cd D:\Software\consul</span><br><span class="line">consul agent -dev -client 0.0.0.0 -ui</span><br><span class="line">::执行完命令后关闭cmd命令窗口</span><br><span class="line">taskkill /f /im cmd.exe</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p><a href="https://blog.csdn.net/qq_37552993/article/details/88547065" target="_blank" rel="noopener">https://blog.csdn.net/qq_37552993/article/details/88547065</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;\assets\js\APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;更新-2019-09-02&quot;&gt;&lt;a href=&quot;#更新-2019-09-02&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
      <category term="生活" scheme="http://disanshijie.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="计算机" scheme="http://disanshijie.top/categories/%E7%94%9F%E6%B4%BB/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="window" scheme="http://disanshijie.top/categories/%E7%94%9F%E6%B4%BB/%E8%AE%A1%E7%AE%97%E6%9C%BA/window/"/>
    
      <category term="bat" scheme="http://disanshijie.top/categories/%E7%94%9F%E6%B4%BB/%E8%AE%A1%E7%AE%97%E6%9C%BA/window/bat/"/>
    
    
      <category term="默认" scheme="http://disanshijie.top/tags/%E9%BB%98%E8%AE%A4/"/>
    
  </entry>
  
</feed>
